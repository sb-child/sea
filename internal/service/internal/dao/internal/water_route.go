// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-02-10 14:29:21
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// WaterRouteDao is the data access object for table water_route.
type WaterRouteDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns WaterRouteColumns // columns contains all the column names of Table for convenient usage.
}

// WaterRouteColumns defines and stores column names for table water_route.
type WaterRouteColumns struct {
	WaterTo  string //
	Route    string //
	Delay    string //
	Disabled string //
	Skipped  string //
}

//  waterRouteColumns holds the columns for table water_route.
var waterRouteColumns = WaterRouteColumns{
	WaterTo:  "water_to",
	Route:    "route",
	Delay:    "delay",
	Disabled: "disabled",
	Skipped:  "skipped",
}

// NewWaterRouteDao creates and returns a new DAO object for table data access.
func NewWaterRouteDao() *WaterRouteDao {
	return &WaterRouteDao{
		group:   "default",
		table:   "water_route",
		columns: waterRouteColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *WaterRouteDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *WaterRouteDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *WaterRouteDao) Columns() WaterRouteColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *WaterRouteDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *WaterRouteDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *WaterRouteDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
